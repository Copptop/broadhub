// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  ADMIN
  HR
  MANAGER
  IT
  USER
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  companyID     String?
  role          UserRole   @default(USER)
  Company       Company?   @relation(fields: [companyID], references: [id], onUpdate: Cascade, onDelete: Cascade)
  basedInID     String?
  basedIn       Location?  @relation(fields: [basedInID], references: [id], onUpdate: Cascade, onDelete: Cascade)
  accounts      Account[]
  Booking       Booking[]
  Favorite      Favorite[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Company {
  id       String     @id @default(cuid())
  code     String     @unique
  name     String
  logo     String?
  User     User[]
  Location Location[]

  @@unique([code, name])
}

enum Region {
  APAC
  UK
  EMEA
  NA
  NENA
}

model Location {
  id        String     @id @default(cuid())
  companyID String
  name      String
  region    Region
  company   Company    @relation(fields: [companyID], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Resource  Resource[]
  User      User[]

  @@unique([companyID, name])
}

enum ResourceType {
  parking
  desk
  meeting_room
  office
}

model Resource {
  id              String       @id @default(cuid())
  name            String
  type            ResourceType
  restrictedRoles UserRole[]   @default([])
  locationID      String
  floor           Int
  location        Location     @relation(fields: [locationID], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Booking         Booking[]
  Favorite        Favorite[]

  @@unique([locationID, name, floor])
}

model Booking {
  id            String    @id @default(cuid())
  userID        String
  resourceID    String
  start         DateTime
  end           DateTime
  user          User      @relation(fields: [userID], references: [id], onUpdate: Cascade, onDelete: Cascade)
  resource      Resource  @relation(fields: [resourceID], references: [id], onUpdate: Cascade, onDelete: Cascade)
  bookingMadeAt DateTime  @default(now())
  lastModifed   DateTime?
}

model Favorite {
  id         String   @id @default(cuid())
  userID     String
  resourceID String
  user       User     @relation(fields: [userID], references: [id], onUpdate: Cascade, onDelete: Cascade)
  resource   Resource @relation(fields: [resourceID], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
